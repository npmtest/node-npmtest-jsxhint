{"/home/travis/build/npmtest/node-npmtest-jsxhint/test.js":"/* istanbul instrument in package npmtest_jsxhint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsxhint/lib.npmtest_jsxhint.js":"/* istanbul instrument in package npmtest_jsxhint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jsxhint = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jsxhint = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jsxhint/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jsxhint && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jsxhint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jsxhint\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jsxhint.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_jsxhint.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jsxhint.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_jsxhint.__dirname +\n                    '/lib.npmtest_jsxhint.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsxhint/node_modules/jsxhint/jsxhint.js":"/**\n * JSXHint CLI tool\n *\n * Copyright 2013 (c) Samuel Reed\n * Inspired by and based on JSXHint by Conde Nast\n *\n * Please see LICENSE for details\n *\n */\n\n'use strict';\n\nvar fs = require('fs-extra');\nvar path = require('path');\nvar Promise = require('bluebird');\nvar utils = require('./utils');\nvar debug = require('debug')('jsxhint');\n\nvar jstransform = require('jstransform/simple');\ntry {\n  var babel = require('babel');\n} catch(e) {\n  // ignore\n}\n\n/**\n * Transform a JSX file into a JS file for linting.\n * @async\n * @param  {String}   fileStream Readable stream containing file contents.\n * @param  {String}   fileName   Name of the file; \"stdin\" if reading from stdio.\n * @param  {Object}   opts       Options.\n * @param  {Function} cb         The callback to call when it's ready.\n */\nfunction transformJSX(fileStream, fileName, opts, cb){\n\n  // Allow omitting filename\n  if (typeof fileName === \"object\"){\n    cb = opts;\n    opts = fileName;\n    fileName = fileStream;\n  }\n\n  if (!babel && (opts['--babel'] || opts['--babel-experimental'])) {\n    throw new Error(\"Optional babel parser not installed. Please `npm install [-g] babel`.\");\n  }\n\n  // Allow passing strings into this method e.g. when using it as a lib\n  if (typeof fileStream === \"string\"){\n    fileStream = fs.createReadStream(fileStream, {encoding: \"utf8\"});\n  }\n\n  return utils.drainStream(fileStream)\n  .then(function processFile(source) {\n    var hasExtension = /\\.jsx$/.exec(fileName) || fileName === \"stdin\";\n    // console.error('has extension', hasExtension);\n    // console.log(fileName);\n    if ((opts['--jsx-only'] && hasExtension) || !opts['--jsx-only']) {\n      try {\n        return transformSource(source, opts);\n      } catch(e) {\n        // Seems that esprima has some problems with some js syntax.\n        if (opts['--transform-errors'] === 'always' ||\n            (opts['--transform-errors'] !== 'never' && hasExtension)) {\n          console.error(\"Error while transforming file \" + fileName + \"\\n\", e.stack);\n          throw utils.transformError(fileName, e, opts);\n        }\n      }\n    }\n    return source;\n  })\n  .nodeify(cb);\n}\n\nfunction transformSource(source, opts){\n  if (opts['--babel'] || opts['--babel-experimental']) {\n    return babel.transform(source, {stage: opts['--babel-experimental'] ? 0 : 2, retainLines: true}).code;\n  } else {\n    return jstransform.transform(source, {\n      react: true,\n      harmony: opts['--harmony'],\n      stripTypes: true,\n      nonStrictEs6module: opts['--non-strict-es6module'] || false,\n      es6module: opts['--es6module'] || false\n    }).code;\n  }\n}\n\n/**\n * Transform a list of files from jsx. Calls back with a map relating\n * the new files (temp files) to the old file names, e.g.\n * {tempFile: originalFileName}\n *\n * @param  {Array}    files File paths to transform.\n * @param  {Object}   jsxhintOpts        Options for JSXHint.\n * @param  {Object}   jshintOpts         Options for JSHint.\n * @param  {Function} cb    Callback.\n */\nfunction transformFiles(files, jsxhintOpts, jshintOpts, cb){\n  return Promise.map(files, function(fileName) {\n    return transformJSX(fileName, jsxhintOpts);\n  })\n  .then(function(filesContents) {\n    debug(\"Successfully transformed %d files to JSX.\", files.length);\n\n    var tempFileNames = utils.createTempFiles(files, filesContents);\n    debug(\"Moved %d files to temp directory at %s.\", files.length, exports.tmpdir);\n    // Create map of temp file names to original file names\n    var fileNameMap = {};\n    files.forEach(function(fileName, index){\n      fileNameMap[tempFileNames[index]] = fileName;\n    });\n    return fileNameMap;\n  })\n  .nodeify(cb);\n}\n\n/**\n * Given a stream (stdin), transform and save to a temporary file so it can be piped\n * into JSHint.\n * JSHint in stream mode attempts to read from process.stdin.\n * Since we can't reload process.stdin with the new transformed data (without forking),\n * we instead just write to a temp file and load it into JSHint.\n *\n * @param  {ReadableStream}   fileStream Readable stream containing data to transform.\n * @param  {Object}   jsxhintOpts        Options for JSXHint.\n * @param  {Object}   jshintOpts         Options for JSHint.\n * @param  {Function} cb                 Callback.\n */\nfunction transformStream(fileStream, jsxhintOpts, jshintOpts, cb){\n  // JSHint now supports a '--filename' option for stdin, allowing overrides to work properly.\n  var fileName = jshintOpts && jshintOpts.filename.replace(process.cwd(), '') || 'stdin';\n\n  return transformJSX(fileStream, fileName, jsxhintOpts)\n  .then(function(contents){\n    var tempFileName = utils.createTempFile(path.join(process.cwd(), fileName), contents);\n    var out = {};\n    out[tempFileName] = fileName;\n    return out;\n  })\n  .nodeify(cb);\n}\n\nexports.tmpdir = utils.tmpdir;\nexports.transformJSX = transformJSX;\nexports.transformFiles = transformFiles;\nexports.transformStream = transformStream;\n","/home/travis/build/npmtest/node-npmtest-jsxhint/node_modules/jsxhint/utils.js":"'use strict';\n\nvar Promise = require('bluebird');\nvar fs = require('fs-extra');\nvar path = require('path');\nvar jshintcli = require('jshint/src/cli');\nvar debug = require('debug')('jsxhint');\nvar os = require('os');\n\n// Check map for copied support files (package.json, .jshintrc) for a speedup.\nvar checkedSupportFiles = {};\n\n\nvar utils = module.exports = {\n  /**\n   * Places all temp files here.\n   * @type {String}\n   */\n  tmpdir: path.join((os.tmpDir || os.tmpdir)(), 'jsxhint', String(process.pid)),\n\n  /**\n   * Drain a readstream into a string.\n   * @param  {ReadableStream}   stream Readable stream.\n   * @promise {String} File contents.\n   */\n  drainStream: function drainStream(stream) {\n    return new Promise(function(resolve, reject) {\n      // Drain stream\n      var source = '';\n      stream.on('data', function(chunk){\n        source += chunk;\n      });\n      stream.on('end', function() {\n        resolve(source);\n      });\n      stream.on('error', reject);\n    });\n  },\n\n  /**\n   * Transforms a parse error into an object with 'file', 'error' properties so it can be fed back into jshint.\n   * @param  {Error} error Parsing error.\n   * @return {Object}      Object with filename and error that JSHint can read.\n   */\n  transformError: function transformError(fileName, error, opts){\n    var err = {\n      file: fileName,\n      error: {\n        line: error.lineNumber,\n        character: error.column,\n        reason: error.description,\n        code: 'E041'\n      }\n    };\n    if (opts['--babel'] || opts['--babel-experimental']) {\n      err.error.line = error.loc.line;\n      err.error.character = error.loc.column;\n      err.error.reason = error.stack.match(/.*:\\s(.*)\\s\\(\\d+:\\d+\\)/)[1];\n    }\n    return err;\n  },\n\n  /**\n   * Given a fileName, get a multi-platform compatible file path that can be appended to an existing filepath.\n   * This is not necessary on *nix but is important on Windows because absolutePath + absolutePath\n   * leads to the concatenation of a drive letter (`c:/`) which is a broken path.\n   * @param  {String} fileName file name.\n   * @return {String}          Cleaned file name.\n   */\n  getCleanAbsolutePath: function getCleanAbsolutePath(fileName) {\n    return '/' + path.relative('/', path.resolve(fileName));\n  },\n\n  /**\n   * As of JSHint 2.5.0 there is a new jshintrc option, overrides. This lets you set glob patterns with separate\n   * rules. It's super useful, but it uses minimatch internally and doesn't match our temp files correctly.\n   * This function modifies the input patterns so they'll work right on our temp dirs.\n   * @param  {Object} jshintrc .jshintrc contents.\n   * @return {Object}          Modified .jshintrc contents.\n   */\n  ensureJshintrcOverrides: function ensureJshintrcOverrides(jshintrc) {\n    if (!jshintrc.overrides) return jshintrc;\n    var base = path.join(utils.tmpdir, process.cwd());\n    jshintrc.overrides = Object.keys(jshintrc.overrides).reduce(function(memo, key) {\n      memo[path.join(base, key)] = jshintrc.overrides[key];\n      return memo;\n    }, {});\n    return jshintrc;\n  },\n\n  /**\n   * Find a config file, searching up from dir to the root, and copy it to the tmpdir. The\n   * JSHint CLI uses these to determine settings.\n   * We attempt to preserve the original folder structure inside the tmpdir\n   * so that we have no unexpected configuration file priority.\n   * @param  {String} dir Basename\n   * @param  {String} file Filename.\n   */\n  copyConfig: function copyConfig(dir, file){\n    var filePath = path.resolve(dir, file);\n    if (checkedSupportFiles[filePath]) return;\n    // Indicate that this is copied already to prevent unnecessary file operations.\n    checkedSupportFiles[filePath] = true;\n\n    if (fs.existsSync(filePath)) {\n      var destination = path.join(utils.tmpdir, utils.getCleanAbsolutePath(filePath));\n      debug(\"Copying support file from %s to temp directory at %s.\", filePath, destination);\n      if (file === '.jshintrc') {\n        try {\n          var jshintrc = jshintcli.loadConfig(filePath);\n          fs.writeJSONSync(destination, utils.ensureJshintrcOverrides(jshintrc));\n        } catch(e) {\n          console.error('Unable to parse .jshintrc file at %s. It must be valid JSON. Error: %s', filePath, e.message);\n          return;\n        }\n      } else {\n        fs.copySync(filePath, destination);\n      }\n    }\n    // Not found, keep looking up the root.\n    else {\n      var parent = path.resolve(dir, '..');\n      // Return null at the root, which is also when dir and its parent are the same.\n      if (dir === parent) return;\n      return copyConfig(parent, file);\n    }\n  },\n\n  /**\n   * Given a filename and contents, write to disk.\n   * @private\n   * @param  {String}   fileName File name.\n   * @param  {String}   contents File contents.\n   */\n  createTempFile: function createTempFile(fileName, contents){\n    fileName = utils.getCleanAbsolutePath(fileName);\n    var fileTempDestination = path.join(utils.tmpdir, fileName);\n\n    // Write the file to the temp directory.\n    // outputFile is from fs-extra and will mkdirp() automatically.\n    fs.outputFileSync(fileTempDestination, contents);\n\n    // For every file, we need to go up the path to find .jshintrc and package.json files, since\n    // they can modify the lint.\n    var dir = path.dirname(fileName);\n    utils.copyConfig(dir, '.jshintrc');\n    utils.copyConfig(dir, 'package.json');\n    return fileTempDestination;\n  },\n\n  /**\n   * Given a list of filenames and their contents, write temporary files\n   * to disk.\n   * @private\n   * @param  {Array}   fileNames    File names.\n   * @param  {Array}   fileContents File contents.\n   */\n  createTempFiles: function createTempFiles(fileNames, fileContents){\n    return fileNames.map(function(fileName) {\n      return utils.createTempFile(fileName, fileContents[fileNames.indexOf(fileName)]);\n    });\n  }\n};\n"}